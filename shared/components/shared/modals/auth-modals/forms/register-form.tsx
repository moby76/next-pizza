//–§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å LoginForm (login-form.tsx)

'use client'

import React from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import toast from 'react-hot-toast';
import { registerUser } from '@/app/actions';
import { FormRegisterSchemaValues, formRegisterSchema } from './schemas';
import { FormInput } from '../../../form-components/form-input';
import { Button } from '@/shared/components/ui';

interface Props {
  onClose?: VoidFunction;
  onClickLogin?: VoidFunction;
}

export const RegisterForm = ({ onClose, onClickLogin }: Props) => {

    const form = useForm<FormRegisterSchemaValues>({
        resolver: zodResolver(formRegisterSchema),
        defaultValues: {
          email: '',
          fullName: '',
          password: '',
          confirmPassword: '',
        },
      });

      const onSubmitRegisterForm = async (data: FormRegisterSchemaValues) => {
        try {
            //–∑–∞–ø—É—Å—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è registerUser.tsx –ø–µ—Ä–µ–¥–∞–≤ –≤ –Ω–µ—ë –¥–∞–Ω–Ω—ã–µ
          await registerUser({
            email: data.email,
            fullName: data.fullName,
            password: data.password,
          });
    
          toast.error('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ üìù. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É', {
            icon: '‚úÖ',
          });
    
          onClose?.();
        } catch (error) {
          return toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π E-Mail –∏–ª–∏ –ø–∞—Ä–æ–ª—å', {
            icon: '‚ùå',
          });
        }
      };

    return (
<FormProvider {...form}>
      <form className="flex flex-col gap-5" onSubmit={form.handleSubmit(onSubmitRegisterForm)}>
        <FormInput name="email" label="E-Mail" required />
        <FormInput name="fullName" label="–ü–æ–ª–Ω–æ–µ –∏–º—è" required />
        <FormInput name="password" label="–ü–∞—Ä–æ–ª—å" type="password" required />
        <FormInput name="confirmPassword" label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" type="password" required />

        <Button loading={form.formState.isSubmitting} className="h-12 text-base" type="submit">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </Button>
      </form>
    </FormProvider>
    )
}